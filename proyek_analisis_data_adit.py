# -*- coding: utf-8 -*-
"""Proyek Analisis Data Adit.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X_IkE1YkNuudoDYE1GjEsAXf5WrC1rmX

# Proyek Analisis Data: [Input Nama Dataset]
- **Nama:** M Aditia Syafei
- **Email:** aditsyafei@gmail.com
- **ID Dicoding:** [Input Username]

## Menentukan Pertanyaan Bisnis

- Berapa Banyak Pelanggan yang melakukan Peminjaman Sepeda pada Hari Libur ? Bandingkan dengan pada hari kerja !
- Bagaimana Tingkat Peminjaman Sepeda berdasarkan Kondisi Cuaca ?

## Import Semua Packages/Library yang Digunakan
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import zscore
import datetime as dt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import streamlit as st
from pyngrok import ngrok
scaler = StandardScaler()

"""## Data Wrangling

### Gathering Data
"""

df = pd.read_csv('day.csv', delimiter=',')
print(df.head())

"""**Insight:**
- Terdapat 16 Kolom dari data day.csv
- Berdasarkan Pertanyaan bisnis di awal, kolom holiday dapat digunakan untuk menjawab pertanyaan no 1
- Berdasarkan Pertanyaan bisnis di awal, kolom weathersit dapat digunakan untuk menjawab pertanyaan no 2

### Assessing Data
"""

print(df.isnull().sum())


print(df.duplicated().sum())

"""**Insight:**
- dataset yang disediakan sudah terisi semua tanpa ada nilai null
- dataset yang disediakan tidak ada nilai duplikat

### Cleaning Data
"""

Q1 = df['cnt'].quantile(0.25)
Q3 = df['cnt'].quantile(0.75)
IQR = Q3 - Q1

maks = Q3 + (1.5 * IQR)
print(maks)
min = Q1 - (1.5 * IQR)
print(min)

df_hapus = df[(df['cnt']>= min) & (df['cnt']<= maks)]
print(df_hapus)

"""**Insight:**
- Nilai batas bawah (Q1) dari dataset bernilai -1.054 dan batas atas (Q3) bernilai 10.162
- setelah proses cleaning tersisa 731 rows data

## Exploratory Data Analysis (EDA)

### Explore ...
"""

df.describe(include="all")
print(df.groupby(by='holiday').agg({
    'cnt': ['mean','max', 'min'],
})
)

print(df.groupby(by='weathersit').agg({
    'cnt': ['mean','max', 'min'],
})
)

"""**Insight:**
- Pada perhitungan tabel pivot dengan rumus agg, pada hari Libur memiliki rata" dan maksimum peminjaman yang lebih kecil dibanding pada hari kerja
- Pada Kondisi Cuaca dengan Bersalju ringan memiliki tingkat peminjaman sepeda paling sedikit

## Visualization & Explanatory Analysis

### Pertanyaan 1:
"""

plt.bar (x='holiday', height='cnt', data=df)
plt.xticks(ticks=[0, 1], labels=['Hari Kerja', 'Hari Libur'])
plt.xlabel('Holiday')
plt.ylabel('Jumlah Peminjaman')
plt.title('Bar Chart of Holiday Counts')
plt.show()

"""### Pertanyaan 2:"""

plt.bar (x='weathersit', height='cnt', data=df)
plt.xticks(ticks=[1,2,3,4], labels=['Cerah', 'Berawan','Gerimis','Hujan Lebat'])
plt.xlabel('Weather')
plt.ylabel('Jumlah Peminjaman')
plt.title('Bar Chart of Holiday Counts')
plt.show()

"""**Insight:**
- Peminjaman Sepeda Pada Hari Kerja Lebih tinggi dibandingkan pada Hari Libur
- Peminjaman Sepeda paling kecil terjadi pada kondisi cuaca Hujan Gerimis

## Analisis Lanjutan (Opsional)
"""

# @title Analisis Clustering
features = ['cnt', 'holiday']
scaled_data = scaler.fit_transform(df[features])
kmeans = KMeans(n_clusters=2, random_state=42)
df['cluster'] = kmeans.fit_predict(scaled_data)

sns.boxplot(x='holiday', y='cnt', hue='cluster', data=df)
plt.xticks(ticks=[0, 1], labels=['Hari Kerja', 'Hari Libur'])
plt.title('Cluster Analysis by Holiday and Count')
plt.show()

"""## Conclusion

- Peminjaman Sepeda Pada Hari Kerja Lebih tinggi dibandingkan pada Hari Libur, perlu upaya untuk dapat meningkatkan peminajaman sepeda pada hari libur
- Peminjaman Sepeda paling kecil terjadi pada kondisi cuaca Hujan Gerimis
- Analisis Lanjutan dengan Clustering, pada kondisi hari kerja peminjaman sepeda tergolong stabil dilihat dari rata" 4.500 dan dari sebaran data lebih dapat diprediksi dibandingkan hari libur
"""

# Commented out IPython magic to ensure Python compatibility.
# # @title Streamlit
# %%writefile app.py
# 
# st.title("Dashboard Data")
# data = pd.read_csv('day.csv')
# st.write(data)
#

ngrok.set_auth_token("2qbTC6vf7cQtSutw1HXFtGE1gYc_AEAXBJRZESsqiXEnw7Qw")
public_url = ngrok.connect(5000)
print('Public URL:', public_url)
